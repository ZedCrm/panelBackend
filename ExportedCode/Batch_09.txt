===== FILE: Infrastructure\Migrations\20251016075250_ChangeUSERROLEdOMAIN.Designer.cs =====
// <auto-generated />
using System;
using ConfApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20251016075250_ChangeUSERROLEdOMAIN")]
    partial class ChangeUSERROLEdOMAIN
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Objects.Base.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Domain.Objects.Base.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("Domain.Objects.Base.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Objects.Base.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Domain.Objects.Base.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Objects.Base.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Objects.Shop.CountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("CountTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Objects.Shop.Inv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Domain.Objects.Shop.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountTypeId");

                    b.HasIndex("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Domain.Objects.Base.RolePermission", b =>
                {
                    b.HasOne("Domain.Objects.Base.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Objects.Base.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Objects.Base.UserRole", b =>
                {
                    b.HasOne("Domain.Objects.Base.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Objects.Base.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Objects.Shop.Product", b =>
                {
                    b.HasOne("Domain.Objects.Shop.CountType", "CountType")
                        .WithMany("products")
                        .HasForeignKey("CountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountType");
                });

            modelBuilder.Entity("Domain.Objects.Base.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Objects.Base.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Objects.Base.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Objects.Shop.CountType", b =>
                {
                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}


===== FILE: Infrastructure\Migrations\MyContextModelSnapshot.cs =====
// <auto-generated />
using System;
using ConfApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Objects.Base.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Domain.Objects.Base.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("Domain.Objects.Base.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Objects.Base.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Domain.Objects.Base.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Objects.Base.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Objects.Shop.CountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("CountTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Objects.Shop.Inv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Domain.Objects.Shop.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountTypeId");

                    b.HasIndex("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Domain.Objects.Base.RolePermission", b =>
                {
                    b.HasOne("Domain.Objects.Base.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Objects.Base.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Objects.Base.UserRole", b =>
                {
                    b.HasOne("Domain.Objects.Base.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Objects.Base.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Objects.Shop.Product", b =>
                {
                    b.HasOne("Domain.Objects.Shop.CountType", "CountType")
                        .WithMany("products")
                        .HasForeignKey("CountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountType");
                });

            modelBuilder.Entity("Domain.Objects.Base.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Objects.Base.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Objects.Base.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Objects.Shop.CountType", b =>
                {
                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}


===== FILE: Infrastructure\CRMBootstraper.cs =====
using App.Contracts.Object.Base;
using App.Contracts.Object.Base.auth;
using App.Contracts.Object.Base.auth.UserContext;
using App.Contracts.Object.Base.Users;
using App.Contracts.Object.Shop.CountTypeCon;
using App.Contracts.Object.Shop.InvCon;
using App.Contracts.Object.Shop.ProductCon;
using App.Object.Base;
using App.Object.Base.auth;
using App.Object.Base.auth.UserContext;
using App.Object.Base.Auth;
using App.Object.Base.Users;
using App.Object.Shop.CountTypeApp;
using App.Object.Shop.invApp;
using App.Object.Shop.ProductApp;
using App.utility;
using ConfApp;
using ConfApp.Rep;
using ConfApp.Rep.bases;
using ConfApp.Rep.Inv;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;



namespace Infrastructure
{
    public static class CRMBootstraper
    {
  public static void AddCRMManagement(IServiceCollection service, string connectionstring, DbProvider dbProvider)
{
    service.AddScoped<IPersonApp, PersonApp>();
    service.AddScoped<IPersonRep, PersonRep>();
    service.AddScoped<IProductApp, ProductApp>();
    service.AddScoped<IProductRep, ProductRep>();
    service.AddScoped<ICountTypeApp, CountTypeApp>();
    service.AddScoped<ICountTypeRep, CountTypeRep>();
    service.AddScoped<IInvApp, InvApp>();
    service.AddScoped<IInvRep, InvRep>();

    service.AddScoped<IAuthApp, AuthApp>();
    service.AddScoped<ITokenApp, TokenApp>();
    service.AddScoped<IUserRepository, UserRep>();
    service.AddScoped<IPermissionRep, PermissionRepository>();
    service.AddScoped<IPermissionService, PermissionService>();
    service.AddScoped<IMyUserRepository, MyuserRepo>();
    service.AddScoped<IUsersApp, UsersApp>();
    service.AddScoped<IRoleRep, RoleRepo>();

    // ✅ اضافه کردن HttpContextAccessor
    service.AddHttpContextAccessor();

    // Register AutoMapper
    service.AddAutoMapper(typeof(ClassMapping));
    service.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

    service.AddScoped<IUserContext, UserContext>();

    // DbContext configuration
    service.AddDbContext<MyContext>(c =>
    {
        if (dbProvider == DbProvider.SqlServer)
        {
            c.UseSqlServer(connectionstring, b => b.MigrationsAssembly("Infrastructure"))
             .EnableSensitiveDataLogging()
             .LogTo(Console.WriteLine);
        }
        else if (dbProvider == DbProvider.Sqlite)
        {
            c.UseSqlite(connectionstring, b => b.MigrationsAssembly("Infrastructure"))
             .EnableSensitiveDataLogging()
             .LogTo(Console.WriteLine);
        }
    }, ServiceLifetime.Scoped);
    
    }

    }



    public enum DbProvider
    {
        SqlServer,
        Sqlite
    }
}




===== FILE: MyFrameWork\AppTool\MessageApp.cs =====
using System;

namespace MyFrameWork.AppTool
{
    public static class MessageApp
    {
        // ------------------------------
        // پیام‌های ثابت عمومی
        // ------------------------------
        public const string AcceptOpt = "عملیات با موفقیت انجام شد.";
        public const string FailOpt = "عملیات با خطا مواجه شد!!!";
        public const string NotPermission = "شما دسترسی لازم را ندارید.";
        public const string OperationCancelled = "عملیات لغو شد.";

        // پیام‌های خطا
        public const string ServerError = "خطای سرور رخ داده است. لطفاً بعداً تلاش کنید.";
        public const string ConnectionFailed = "اتصال به سرور برقرار نشد.";
        public const string Timeout = "زمان درخواست به پایان رسید.";
        public const string InvalidFormat = "فرمت ورودی صحیح نیست.";
        public const string InvalidInput = "ورودی وارد شده معتبر نیست.";

        // پیام‌های اعتبارسنجی
        public const string IsRequired = "این مقدار نمی‌تواند خالی باشد.";
        public const string MaxLength = "تعداد کاراکتر وارد شده بیشتر از حد مجاز است.";
        public const string MinLength = "تعداد کاراکتر وارد شده کمتر از حد مجاز است.";
        public const string NotFound = "مورد مورد نظر یافت نشد.";
        public const string DuplicateEntry = "این مقدار قبلاً ثبت شده است.";

        // ------------------------------
        // متدهای پویا برای پیام‌های قابل شخصی‌سازی
        // ------------------------------
        
        public static string RequiredField(string fieldName)
            => $"{fieldName} نمی‌تواند خالی باشد.";

        public static string MaxLengthExceeded(string fieldName, int maxLength)
            => $"تعداد کاراکترهای {fieldName} بیشتر از {maxLength} کاراکتر است.";

        public static string MinLengthNotMet(string fieldName, int minLength)
            => $"تعداد کاراکترهای {fieldName} کمتر از {minLength} کاراکتر است.";

        public static string NotFoundItem(string itemName)
            => $"{itemName} یافت نشد.";

        public static string DuplicateField(string fieldName)
            => $"{fieldName} قبلاً ثبت شده است.";

        public static string InvalidFieldInput(string fieldName)
            => $"مقدار وارد شده برای {fieldName} معتبر نیست.";

        public static string CustomError(string errorDetail)
            => $"خطا: {errorDetail}";

        public static string CustomSuccess(string action)
            => $"عملیات {action} با موفقیت انجام شد.";

        public static string CustomFail(string action)
            => $"عملیات {action} با خطا مواجه شد: {action}";
        

        public static string CustomDeleteFail(string action)
            => $". حذف با خطا مواجه شد: {action}";
        public static string CustomAddsuccses(string action)
            => $". رکورد با موفقیت ذخیره  شد: {action}";

        // ------------------------------
        // پیام‌های اطلاع‌رسانی
        // ------------------------------
        public const string InfoNoChanges = "هیچ تغییر جدیدی اعمال نشد.";
        public const string InfoSaved = "اطلاعات با موفقیت ذخیره شد.";
        public const string InfoDeleted = "مورد با موفقیت حذف شد.";
    
                // ------------------------------
        // پیام‌های اعتبارسنجی (DataAnnotation)
        // ------------------------------
        public const string IsRequiredcustom = "لطفاً {0} را وارد کنید.";
        public const string MaxLengthcustom = "تعداد کاراکترهای {0} نمی‌تواند بیشتر از {1} باشد.";
        public const string MinLengthcustom = "تعداد کاراکترهای {0} نمی‌تواند کمتر از {1} باشد.";
        public const string NotFoundcustom = "{0} یافت نشد.";
        public const string DuplicateEntrycustom = "{0} قبلاً ثبت شده است.";
        public const string InvalidInputcustom = "مقدار وارد شده برای {0} معتبر نیست.";
    
    
    
    
    
    }
}


===== FILE: MyFrameWork\AppTool\OPT.cs =====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyFrameWork.AppTool
{
    public class OPT
    {
        public bool IsSucceeded { get; set; }
        public  string Message { get; set; }
        public OPT()
        {
            IsSucceeded = true;
        }

        public OPT Succeeded(string message = "عملیات با موفقیت انجام شد")
        {
            IsSucceeded = true;
            Message = message;
            return this;
        }
        public OPT Failed(string message)
        {
            IsSucceeded = false;
            Message = message;
            return this;
        }
    }
}


===== FILE: MyFrameWork\AppTool\OPTResult.cs =====
using System;
using System.Collections.Generic;

namespace MyFrameWork.AppTool
{
    public class OPTResult<T> where T : class
    {
        public bool IsSucceeded { get; set; }   // وضعیت موفقیت عملیات
        public string? Message { get; set; }     // پیام عملیات
        public List<T>? Data { get; set; }       // لیست داده‌ها برای حالت لیستی
        public T? SingleData { get; set; }       // داده‌ی تکی برای عملیات‌های خاص
        public int? TotalRecords { get; set; }   // مجموع رکوردها (در صفحه‌بندی)
        public int? TotalPages { get; set; }     // مجموع صفحات (در صفحه‌بندی)
        public int? PageNumber { get; set; }     // شماره صفحه جاری
        public int? PageSize { get; set; }       // تعداد آیتم در هر صفحه

        // متد سازنده پیش‌فرض
        public OPTResult()
        {
            IsSucceeded = true;
        }

        // ساخت نتیجه موفق برای لیست داده‌ها
        public static OPTResult<T> Success(List<T> data, string message = "عملیات با موفقیت انجام شد")
        {
            return new OPTResult<T>
            {
                IsSucceeded = true,
                Message = message,
                Data = data
            };
        }

        // ساخت نتیجه موفق برای یک داده تکی
        public static OPTResult<T> Success(T singleData, string message = "عملیات با موفقیت انجام شد")
        {
            return new OPTResult<T>
            {
                IsSucceeded = true,
                Message = message,
                SingleData = singleData
            };
        }


        // ساخت نتیجه موفق با پیام و بدون داده
        public static OPTResult<T> Success(string message = "عملیات با موفقیت انجام شد")
        {
            return new OPTResult<T>
            {
                IsSucceeded = true,
                Message = message
            };
        }





        // ساخت نتیجه ناموفق با پیام خطا
        public static OPTResult<T> Failed(string message = "عملیات با شکست مواجه شد")
        {
            return new OPTResult<T>
            {
                IsSucceeded = false,
                Message = message
            };
        }
    }
}


===== FILE: MyFrameWork\AppTool\Pagination.cs =====
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyFrameWork.AppTool
{
    public class Pagination
    {
        [DefaultValue(1)]
        public int PageNumber { get; set; } = 1;
        [DefaultValue(3)]
        public int PageSize { get; set; } = 3;
        [DefaultValue("Id")]
        public string SortBy { get; set; } = "Id";
        public bool SortDirection { get; set; } = true;

        public int CalculateSkip()
        {
            return (PageNumber - 1) * PageSize; // محاسبه مقدار skip  
        }

        // متدی برای محاسبه تعداد کل صفحات با توجه به تعداد کل رکوردها  
        public int CalculateTotalPages(int totalRecords)
        {
            return (int)Math.Ceiling((double)totalRecords / PageSize); // محاسبه تعداد کل صفحات  
        }
    }
}


===== FILE: MyFrameWork\AppTool\PredicateBuilder.cs =====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace MyFrameWork.AppTool
{
    public static class PredicateBuilder
    {
        public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> expr1, Expression<Func<T, bool>> expr2)
        {
            var parameter = Expression.Parameter(typeof(T));

            var combined = Expression.Invoke(expr1, parameter);
            var second = Expression.Invoke(expr2, parameter);
            var body = Expression.AndAlso(combined, second);

            return Expression.Lambda<Func<T, bool>>(body, parameter);
        }
    }
}


===== FILE: MyFrameWork\AppTool\SelectSourceAttribute.cs =====
using System;


namespace MyFrameWork.AppTool;
[AttributeUsage(AttributeTargets.Property)]
public class SelectSourceAttribute : Attribute
{
    public string SourceName { get; }

    public SelectSourceAttribute(string sourceName)
    {
        SourceName = sourceName;
    }
}


===== FILE: MyFrameWork\AppTool\Validator.cs =====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyFrameWork.AppTool
{
    public static class Validators
    {

        public static void CheckRequired(string value, string fieldName)
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                throw new ArgumentException($"مقدار {fieldName} اجباریست.");
            }
        }

        public static void CheckStringLength(string value, int minLength, int maxLength, string fieldName)
        {
            if (value.Length < minLength || value.Length > maxLength)
            {
                throw new ArgumentException($"مقدار کارکتر {fieldName} باید بین {minLength} و {maxLength} . باشد ");
            }
        }

       
    }
}


